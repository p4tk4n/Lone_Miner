[gd_scene load_steps=4 format=3 uid="uid://b0ptav00g46sy"]

[ext_resource type="Texture2D" uid="uid://dkyyldpurmcl" path="res://Resources/Sprites/hotbar_bg.png" id="1_xxncg"]
[ext_resource type="Texture2D" uid="uid://dpm4hf64gxkxk" path="res://Resources/Sprites/highlight_slot.png" id="2_82vpx"]

[sub_resource type="GDScript" id="GDScript_cd5lr"]
script/source = "extends Control

const SLOTS_X =10
const SLOTS_Y = 1

const SLOT_SIZE = Vector2(48, 48)
const HALF_SLOT = 0.5 * SLOT_SIZE
var hovered_index = 0
const MAX_SLOTS = SLOTS_X * SLOTS_Y

@onready var inventory_bg = $inventory_bg
@onready var highlight_slot = $highlight_slot
var inventory_item = preload(\"res://Scenes/inventory_item.tscn\")
# Offset to account for the centered inventory_bg (-144, -72)
var offset_x = 0
var offset_y = 0
var inventory_offset = Vector2(offset_x,offset_y)
var items : Array
var picked_item = null
var picked_index = -1

func _ready():
	highlight_slot.visible = Global.player_inventory_open
	#inventory_bg.position = inventory_offset
	Global.inventory_updated.connect(place_items)
	Global.inventory_updated.connect(update_item_positions)
	items.resize(MAX_SLOTS)
	
	place_items()
	update_item_positions()

func place_items():
	print(items)
	#clears the inv
	#var children = get_children()
	#for i in range(get_children().size()):
		#if not children[i] is TextureRect and children[i]:
			#remove_child(children[i])
			
	for child in get_children():
		if child is Node2D and (child != inventory_bg and child != highlight_slot):
			remove_child(child) 
	items = []
	items.resize(MAX_SLOTS)
	
	for i in Global.inventory.size():
		if Global.inventory[i]:
			var inv_item_instance = inventory_item.instantiate()
			inv_item_instance.item_id = Global.inventory[i][\"texture_id\"]
			inv_item_instance.get_node(\"amountLabel\").text = str(Global.inventory[i][\"quantity\"])
			add_child(inv_item_instance)
			items[i] = inv_item_instance

func update_item_positions():
	for i in range(MAX_SLOTS):
		var item = items[i]
		if item != null:
			item.position = get_pos_by_index(i)+HALF_SLOT
			print(item,\" at position: \",item.position)
			
func get_pos_by_index(index : int):
	var slots_x = index % SLOTS_X  # Column (x-coordinate)
	var slots_y = int(index / SLOTS_X)  # Row (y-coordinate)
	return SLOT_SIZE * Vector2(slots_x, slots_y) + inventory_offset

# Function to calculate index based on position
func get_index_by_pos(lpos : Vector2) -> int:
	# Adjust the local position by the inventory offset
	var adjusted_pos = lpos - inventory_offset
	
	# Check if the adjusted position is within the bounds of the inventory grid
	if adjusted_pos.x < 0 or adjusted_pos.y < 0:
		return 0
	if adjusted_pos.x >= (SLOTS_X * SLOT_SIZE.x):
		return 0
	if adjusted_pos.y >= (SLOTS_Y * SLOT_SIZE.y):
		return 0
	
	# Calculate the slot index based on the adjusted position
	var rough_slot = adjusted_pos / SLOT_SIZE
	var int_x = int(rough_slot.x)
	var int_y = int(rough_slot.y)
	var index = int_y * SLOTS_X + int_x
	return index

func get_item(index : int) -> Item:
	if index < 0:
		return null
	if index > MAX_SLOTS-1:
		return null
	
	var item = items[index]
	items[index] = null
	return item

func set_item(item: Item, index : int):
	var item_in_slot = get_item(index)
	if not item_in_slot:
		items[index] = item
		return true
	return false
	
func _process(delta):
	var l_mpos = get_local_mouse_position()
	var hovered_index = get_index_by_pos(l_mpos)
	var highlight_slot_pos = get_pos_by_index(hovered_index)
	highlight_slot.visible = Global.player_inventory_open
	highlight_slot.position = highlight_slot_pos
	if Input.is_action_just_pressed(\"mouse_left\"):
		var item = get_item(hovered_index)
		if item:
			picked_item = item
			picked_index = hovered_index
	if picked_item:
		picked_item.position = get_local_mouse_position()
		
	if Input.is_action_just_released(\"mouse_left\"):
		var item_in_slot = get_item(hovered_index)
		if not item_in_slot:
			var placed = false
			if hovered_index >= 0 and hovered_index < MAX_SLOTS:
				placed = set_item(picked_item,hovered_index)
			if not placed:
				set_item(picked_item,picked_index)
		else:
			#swap items
			set_item(item_in_slot,picked_index)
			set_item(picked_item,hovered_index)
		picked_item = null
		update_item_positions()
"

[node name="InventoryNode" type="Control"]
layout_mode = 3
anchors_preset = 0
script = SubResource("GDScript_cd5lr")

[node name="inventory_bg" type="TextureRect" parent="."]
z_index = 10
layout_mode = 1
offset_right = 288.0
offset_bottom = 48.0
size_flags_horizontal = 8
texture = ExtResource("1_xxncg")

[node name="highlight_slot" type="TextureRect" parent="."]
z_index = 10
layout_mode = 1
offset_right = 48.0
offset_bottom = 48.0
texture = ExtResource("2_82vpx")
